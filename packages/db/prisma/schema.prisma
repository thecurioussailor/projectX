// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  username          String     @unique
  password          String
  name              String?
  email             String?    @unique
  role              Role       @default(USER)
  phone             String?    @unique
  profileImage      String?
  coverImage        String?
  location          String?
  emailVerified     Boolean    @default(false)
  emailVerifiedAt   DateTime?
  isBanned          Boolean    @default(false)
  createdAt         DateTime   @default(now())
  wallet            Wallet?
  kycDocument       KycDocument?
  telegramAccounts            TelegramAccount[]
  products                    DigitalProduct[]
  orders                      Order[]
  transactions                Transaction[]
  links                       Link[]
  telegramSubscriptions       TelegramSubscription[]
  digitalProductPurchases     DigitalProductPurchase[]
  userPlatformSubscriptions   UserPlatformSubscription[]
  notifications               Notification[]
}

enum Role {
  USER
  ADMIN
}

model KycDocument {
  id              String                @id @default(cuid())
  userId          Int                   @unique
  user            User                  @relation(fields: [userId], references: [id])
  documentType    DocumentType
  documentNumber  String
  documentName    String
  s3Key           String                // S3 key for file management
  status          KycDocumentStatus     @default(PENDING)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

enum DocumentType {
  PAN
  PASSPORT
  DRIVERS_LICENSE
  NATIONAL_ID
  VOTER_ID
  TAX_ID
  UTILITY_BILL
  BANK_STATEMENT
  OTHER
}

enum KycDocumentStatus {
  PENDING
  APPROVED
  REJECTED
  RESUBMIT_REQUESTED
}

model Wallet {
  id                  String    @id @default(cuid())
  user                User      @relation(fields: [userId], references: [id])
  userId              Int       @unique  // One-to-one relationship with User

  totalBalance        Decimal   @default(0.0)  // Total money (withdrawable + pending)
  withdrawableBalance Decimal   @default(0.0)  // Amount available for withdrawal
  pendingBalance      Decimal   @default(0.0)  // Amount not yet available
  totalEarnings       Decimal   @default(0.0)  // Lifetime earnings
  totalCharges        Decimal   @default(0.0)  // Total charges so far
  totalWithdrawn      Decimal   @default(0.0)  // Total withdrawn so far

  lastUpdated         DateTime  @default(now())
  createdAt           DateTime  @default(now())

  withdrawalRequests  WithdrawalRequest[]
}

model WithdrawalRequest {
  id              String            @id @default(cuid())

  wallet          Wallet            @relation(fields: [walletId], references: [id])
  walletId        String

  amount          Decimal
  status          WithdrawalStatus  @default(PENDING)

  paymentMethod   String?            // Bank transfer, PayPal, etc.
  paymentDetails  Json?              // Account details for the payment

  adminNotes      String?           // Admin notes
  processedAt     DateTime?         // When admin processed the withdrawal
  processedBy     String?           // Admin who processed it
  transactionId   String?           // Reference ID for the payment
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  transactions    WithdrawalTransaction[]
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

model WithdrawalTransaction {
  id                  String            @id @default(cuid())
  withdrawalRequestId String
  withdrawalRequest   WithdrawalRequest @relation(fields: [withdrawalRequestId], references: [id])
  amount              Decimal
  method              String            // Razorpay, Cashfree, etc.
  txnId               String            // transaction_id from Razorpay/Cashfree
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model PlatformSubscriptionPlan {
  id                String             @id @default(cuid())
  name              String
  description       String?
  monthlyPrice      Decimal            @default(0)      // Monthly price
  annualPrice       Decimal?           // Optional annual pricing
  isCustom          Boolean            @default(false)

  transactionFeePercentage Decimal     @default(11.00)   // Default 11% for free plan
  
  // Plan status
  isActive                  Boolean     @default(true)
  isDefault                 Boolean     @default(false)  // Only one plan can be default
  
  // Metadata
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  deletedAt                 DateTime?

  features                  PlatformSubscriptionPlanFeature[]
  userPlatformSubscriptions         UserPlatformSubscription[]
}

model PlatformSubscriptionPlanFeature {
  id                String             @id @default(cuid())
  platformPlan      PlatformSubscriptionPlan   @relation(fields: [platformPlanId], references: [id])
  platformPlanId    String
  
  featureKey        String             // max_digital_products, max_telegram_subscriptions, max_links, etc. 
  limitValue        Int?               // null = unlimited, specific number = limit
  
  data              Json?
  
  isEnabled         Boolean            @default(true)

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([platformPlanId, featureKey])
}
model UserPlatformSubscription {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            Int             
  platformPlan              PlatformSubscriptionPlan   @relation(fields: [platformPlanId], references: [id])
  platformPlanId            String
  
  // Subscription status
  status            SubscriptionStatus @default(ACTIVE)
  
  // Billing cycle
  billingCycle      BillingCycle       @default(MONTHLY)
  
  // Dates
  startDate         DateTime           @default(now())
  endDate           DateTime
  trialEndDate      DateTime?
  
  // Payments
  currentPeriodStart DateTime          @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  
  // Fee override (optional - for custom plans)
  customFeePercentage Decimal?         // Overrides plan fee if set
  
  // Metadata
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Payment tracking
  orders Order[]
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  UNPAID
  CANCELED
  TRIALING
  EXPIRED
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
  LIFETIME
}

model TelegramAccount {
  id                String      @id @default(cuid())
  userId            Int         
  user              User        @relation(fields: [userId], references: [id])
  telegramNumber    String?
  telegramUsername  String? 
  session           String?
  phoneCodeHash     String?
  authenticated     Boolean     @default(false)
  verified          Boolean     @default(false)
  channels          TelegramChannel[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
}

model TelegramChannel {
  id                    String            @id @default(cuid())
  telegramAccountId     String            
  telegramAccount       TelegramAccount   @relation(fields: [telegramAccountId], references: [id])
  telegramChannelId     String?
  channelName           String
  channelDescription    String?
  richDescription       String?
  bannerImage           String?
  botAdded              Boolean           @default(false)
  status                TelegramChannelStatus @default(INACTIVE)
  createdAt             DateTime          @default(now())
  telegramPlans         TelegramPlan[]
  deletedAt             DateTime?
}

enum TelegramChannelStatus {
  ACTIVE
  INACTIVE
}

model TelegramPlan {
  id              String          @id @default(cuid())
  channel         TelegramChannel @relation(fields: [channelId], references: [id])
  channelId       String
  name            String
  price           Decimal
  duration        Int      // Duration in days
  status          TelegramPlanStatus  @default(ACTIVE)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime? 
  subscriptions   TelegramSubscription[]
  orders          Order[]
}

enum TelegramPlanStatus {
  ACTIVE
  INACTIVE
}

model TelegramSubscription {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id])  // Customer subscribing
  userId            Int
  telegramUsername  String?   // User's Telegram username or number
  telegramUserId    String?   // User's Telegram ID
  plan              TelegramPlan      @relation(fields: [planId], references: [id])
  planId            String
  planName          String
  planPrice         Decimal
  planDuration      Int
  expiryDate        DateTime
  inviteLink        String?
  inviteLinkId      String?
  status            TelegramSubscriptionStatus @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum TelegramSubscriptionStatus {
  ACTIVE
  EXPIRED
}

model DigitalProduct {
  id              String    @id @default(cuid())
  creator         User      @relation(fields: [creatorId], references: [id])
  creatorId       Int
  title           String
  description     String?
  category        String?
  coverImage      String?
  themeColor      String?    @default("#000000")
  priceType       PriceType? @default(FIXED)
  price           Decimal
  discountedPrice Decimal?
  hasDiscount     Boolean   @default(false)
  ctaButtonText   String?
  status          ProductStatus @default(PENDING)
  isLimitedQuantityEnabled   Boolean      @default(false)
  quantity        Int?
  image           String?
  files           DigitalFile[]
  testimonials    Testimonial[]
  faqs            FAQ[]
  galleryImages   GalleryImage[]
  registrationQns RegistrationQuestion[]
  orders          Order[]
  supportDetails  SupportDetail[]  // Store URLs for PDFs, images, videos
  createdAt       DateTime  @default(now())

  purchases DigitalProductPurchase[]
}

model DigitalProductPurchase {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  product         DigitalProduct  @relation(fields: [productId], references: [id])
  productId       String
  purchaseDate    DateTime        @default(now())
  price           Decimal
  status          PurchaseStatus  @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum PurchaseStatus {
  ACTIVE
  REVOKED
}

enum PriceType {
  FIXED
  FLEXIBLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model DigitalFile {
  id            String          @id @default(cuid())
  product       DigitalProduct  @relation(fields: [productId], references: [id])
  productId     String
  fileType      FileType
  fileUrl       String
  fileName      String
  fileSize      Int
  s3Key         String
  createdAt     DateTime        @default(now())
}

enum FileType {
  PDF
  IMAGE
  VIDEO
  LINK
  DOCUMENT
  AUDIO
  OTHER
}

model Testimonial {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  name        String
  image       String?
  description String
  rating      Int @default(5)  // 1 to 5 stars
  createdAt   DateTime       @default(now())
}

model FAQ {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  answer      String
  createdAt   DateTime       @default(now())
}

model GalleryImage {
  id          String         @id @default(cuid()) 
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  imageUrl    String
  imageOrder  Int?
  imageType   ImageType
  imageName   String?
  createdAt   DateTime       @default(now())
} 

enum ImageType {
  IMAGE
  VIDEO
}

model RegistrationQuestion {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  fieldType   FieldType
  fieldOptions String[]
  isRequired  Boolean      @default(false)
  createdAt   DateTime       @default(now())
} 

enum FieldType {
  TEXT
  DROPDOWN
  RADIO
  CHECKBOX
  DATE
  EMAIL
  PHONE
  NUMBER
}

model SupportDetail {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  email       String?
  phone       String?
  whatsapp    String?
  telegram    String?
  createdAt   DateTime       @default(now())
}

model Order {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  method          String
  amount          Decimal
  status          OrderStatus    @default(PENDING)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  productType       ProductType

  platformSubscription   UserPlatformSubscription?   @relation(fields: [platformSubscriptionId], references: [id])
  platformSubscriptionId String?

  digitalProductId       String?
  digitalProduct         DigitalProduct? @relation(fields: [digitalProductId], references: [id])
  
  telegramPlan      TelegramPlan?   @relation(fields: [telegramPlanId], references: [id])
  telegramPlanId    String?

  transactionId   String?

  transaction Transaction?
}

enum ProductType {
  PLATFORM_SUBSCRIPTION
  DIGITAL_PRODUCT
  TELEGRAM_PLAN
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id            String               @id @default(cuid())
  user          User                 @relation(fields: [userId], references: [id])
  userId        Int
  order         Order                @relation(fields: [orderId], references: [id])
  orderId       String               @unique
  gateway       String     // "Razorpay", "Cashfree"
  gatewayTxnId  String     // payment_id from Razorpay/Cashfree
  amount        Decimal
  status        TransactionStatus    @default(PENDING)
  paymentMethod           Json?              // payment_method from Cashfree
  paymentGroup            String?              // payment_group from Cashfree
  paymentMessage          String?              // payment_message from Cashfree
  paymentTime             DateTime?            // payment_time from Cashfree
  paymentCompletionTime   DateTime?          // payment_completion_time from Cashfree
  bankReference           String?              // bank_reference from Cashfree
  authId                  String?              // auth_id from Cashfree
  paymentCurrency         String?              // payment_currency from Cashfree
  paymentGatewayDetails   Json?              // payment_gateway_details from Cashfree
  createdAt     DateTime             @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Setting {
  id          String   @id @default(cuid())
  title       String
  description String?
  logo        String?
  email       String
  phone       String
  createdAt   DateTime @default(now())
}

model Link {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  originalUrl String
  shortId     String    @unique
  shortUrl    String    @unique
  clicks      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  analytics   ClickAnalytics[]
  deletedAt   DateTime?
}

model ClickAnalytics {
  id          String    @id @default(cuid())
  link        Link      @relation(fields: [linkId], references: [id])
  linkId      String
  ipAddress   String?
  host        String?
  userAgent   String?
  referer     String?
  latitude    Float?
  longitude   Float?
  screenWidth Int?
  screenHeight Int?
  browser     String?
  operatingSystem String?
  device      String?
  language    String?
  country     String?
  city        String?
  region      String?
  createdAt   DateTime  @default(now())

  @@index([linkId])
  
}

model Notification {
  id          String              @id @default(cuid())
  user        User                @relation(fields: [userId], references: [id])
  userId      Int
  title       String
  message     String
  type        NotificationType
  isRead      Boolean             @default(false)
  data        Json?               // Optional metadata (orderId, channelId, etc.)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum NotificationType {
  SUCCESS
  ERROR
  INFO
}