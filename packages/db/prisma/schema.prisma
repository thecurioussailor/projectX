// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  username          String     @unique
  password          String
  name              String?
  email             String?    @unique
  role              Role       @default(USER)
  phone             String?    @unique
  profileImage      String?
  coverImage        String?
  location          String?
  emailVerified     Boolean    @default(false)
  emailVerifiedAt   DateTime?
  wallet            Decimal    @default(0.0)
  createdAt         DateTime   @default(now())

  telegramAccounts      TelegramAccount[]
  products              DigitalProduct[]
  orders                Order[]
  transactions          Transaction[]
  links                 Link[]
  telegramSubscriptions TelegramSubscription[]
}

enum Role {
  USER
  ADMIN
}

model TelegramAccount {
  id              String      @id @default(cuid())
  userId          Int         
  user            User        @relation(fields: [userId], references: [id])
  telegramNumber  String      @unique
  session         String?
  phoneCodeHash   String?
  authenticated   Boolean     @default(false)
  verified        Boolean     @default(false)
  channels        TelegramChannel[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model TelegramChannel {
  id                    String            @id @default(cuid())
  telegramAccountId     String            
  telegramAccount       TelegramAccount   @relation(fields: [telegramAccountId], references: [id])
  telegramChannelId     String?
  channelName           String
  channelDescription    String?
  botAdded              Boolean           @default(false)
  status                TelegramChannelStatus @default(INACTIVE)
  createdAt             DateTime          @default(now())
  telegramPlans         TelegramPlan[]
}

enum TelegramChannelStatus {
  ACTIVE
  INACTIVE
}

model TelegramPlan {
  id              String          @id @default(cuid())
  channel         TelegramChannel @relation(fields: [channelId], references: [id])
  channelId       String
  name            String
  price           Decimal
  duration        Int      // Duration in days
  status          TelegramPlanStatus  @default(ACTIVE)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime? 
  subscriptions   TelegramSubscription[]
}

enum TelegramPlanStatus {
  ACTIVE
  INACTIVE
}

model TelegramSubscription {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])  // Customer subscribing
  userId            Int
  telegramUsername String   // Userâ€™s Telegram username or number
  plan          TelegramPlan @relation(fields: [planId], references: [id])
  planId        String
  planName      String
  planPrice     Decimal
  planDuration  Int
  expiryDate    DateTime
  status        TelegramSubscriptionStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
}

enum TelegramSubscriptionStatus {
  ACTIVE
  EXPIRED
}

model DigitalProduct {
  id              String    @id @default(cuid())
  creator         User      @relation(fields: [creatorId], references: [id])
  creatorId       Int
  title           String
  description     String?
  category        String?
  coverImage      String?
  themeColor      String?    @default("#000000")
  priceType       PriceType? @default(FIXED)
  price           Decimal
  discountedPrice Decimal?
  hasDiscount     Boolean   @default(false)
  ctaButtonText   String?
  status          ProductStatus @default(PENDING)
  isLimitedQuantityEnabled   Boolean      @default(false)
  quantity        Int?
  image           String?
  files           DigitalFile[]
  testimonials    Testimonial[]
  faqs            FAQ[]
  galleryImages   GalleryImage[]
  registrationQns RegistrationQuestion[]
  orders          Order[]
  supportDetails  SupportDetail[]  // Store URLs for PDFs, images, videos
  createdAt       DateTime  @default(now())
}

enum PriceType {
  FIXED
  FLEXIBLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model DigitalFile {
  id            String          @id @default(cuid())
  product       DigitalProduct  @relation(fields: [productId], references: [id])
  productId     String
  fileType      FileType
  fileUrl       String
  fileName      String
  fileSize      Int
  s3Key         String
  createdAt     DateTime        @default(now())
}

enum FileType {
  PDF
  IMAGE
  VIDEO
  LINK
  DOCUMENT
  AUDIO
  OTHER
}

model Testimonial {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  name        String
  image       String?
  description String
  rating      Int @default(5)  // 1 to 5 stars
  createdAt   DateTime       @default(now())
}

model FAQ {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  answer      String
  createdAt   DateTime       @default(now())
}

model GalleryImage {
  id          String         @id @default(cuid()) 
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  imageUrl    String
  imageOrder  Int?
  imageType   ImageType
  imageName   String?
  createdAt   DateTime       @default(now())
} 

enum ImageType {
  IMAGE
  VIDEO
}

model RegistrationQuestion {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  fieldType   FieldType
  fieldOptions String[]
  isRequired  Boolean      @default(false)
  createdAt   DateTime       @default(now())
} 

enum FieldType {
  TEXT
  DROPDOWN
  RADIO
  CHECKBOX
  DATE
  EMAIL
  PHONE
  NUMBER
}

model SupportDetail {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  email       String?
  phone       String?
  whatsapp    String?
  telegram    String?
  createdAt   DateTime       @default(now())
}

model Order {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  product    DigitalProduct @relation(fields: [productId], references: [id])
  productId  String
  status     String    @default("PENDING") // PENDING, SUCCESS, FAILED
  method     String    // Payment method like Stripe, Razorpay
  transactionId String?
  createdAt  DateTime  @default(now())

  transaction Transaction?
}


model Transaction {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  amount     Decimal
  status     String    @default("PENDING") // PENDING, SUCCESS, FAILED
  orderId    String?   @unique
  createdAt  DateTime  @default(now())

  order      Order?    @relation(fields: [orderId], references: [id])
}

model Setting {
  id          String   @id @default(cuid())
  title       String
  description String?
  logo        String?
  email       String
  phone       String
  createdAt   DateTime @default(now())
}

model Link {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  originalUrl String
  shortId     String    @unique
  shortUrl    String    @unique
  clicks      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}