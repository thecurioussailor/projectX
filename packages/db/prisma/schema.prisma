// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  username          String     @unique
  password          String
  name              String?
  email             String?    @unique
  role              Role       @default(USER)
  phone             String?    @unique
  profileImage      String?
  coverImage        String?
  location          String?
  emailVerified     Boolean    @default(false)
  emailVerifiedAt   DateTime?
  wallet            Decimal    @default(0.0)
  createdAt         DateTime   @default(now())

  telegramAccounts      TelegramAccount[]
  products              DigitalProduct[]
  orders                Order[]
  transactions          Transaction[]
  links                 Link[]
  telegramSubscriptions TelegramSubscription[]
  digitalProductPurchases DigitalProductPurchase[]
}

enum Role {
  USER
  ADMIN
}

model TelegramAccount {
  id                String      @id @default(cuid())
  userId            Int         
  user              User        @relation(fields: [userId], references: [id])
  telegramNumber    String?      @unique
  telegramUsername  String?     @unique
  session           String?
  phoneCodeHash     String?
  authenticated     Boolean     @default(false)
  verified          Boolean     @default(false)
  channels          TelegramChannel[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model TelegramChannel {
  id                    String            @id @default(cuid())
  telegramAccountId     String            
  telegramAccount       TelegramAccount   @relation(fields: [telegramAccountId], references: [id])
  telegramChannelId     String?
  channelName           String
  channelDescription    String?
  botAdded              Boolean           @default(false)
  status                TelegramChannelStatus @default(INACTIVE)
  createdAt             DateTime          @default(now())
  telegramPlans         TelegramPlan[]
  deletedAt             DateTime?
}

enum TelegramChannelStatus {
  ACTIVE
  INACTIVE
}

model TelegramPlan {
  id              String          @id @default(cuid())
  channel         TelegramChannel @relation(fields: [channelId], references: [id])
  channelId       String
  name            String
  price           Decimal
  duration        Int      // Duration in days
  status          TelegramPlanStatus  @default(ACTIVE)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime? 
  subscriptions   TelegramSubscription[]
  orders          Order[]
}

enum TelegramPlanStatus {
  ACTIVE
  INACTIVE
}

model TelegramSubscription {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id])  // Customer subscribing
  userId            Int
  telegramUsername  String   // Userâ€™s Telegram username or number
  plan              TelegramPlan      @relation(fields: [planId], references: [id])
  planId            String
  planName          String
  planPrice         Decimal
  planDuration      Int
  expiryDate        DateTime
  status            TelegramSubscriptionStatus @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum TelegramSubscriptionStatus {
  ACTIVE
  EXPIRED
}

model DigitalProduct {
  id              String    @id @default(cuid())
  creator         User      @relation(fields: [creatorId], references: [id])
  creatorId       Int
  title           String
  description     String?
  category        String?
  coverImage      String?
  themeColor      String?    @default("#000000")
  priceType       PriceType? @default(FIXED)
  price           Decimal
  discountedPrice Decimal?
  hasDiscount     Boolean   @default(false)
  ctaButtonText   String?
  status          ProductStatus @default(PENDING)
  isLimitedQuantityEnabled   Boolean      @default(false)
  quantity        Int?
  image           String?
  files           DigitalFile[]
  testimonials    Testimonial[]
  faqs            FAQ[]
  galleryImages   GalleryImage[]
  registrationQns RegistrationQuestion[]
  orders          Order[]
  supportDetails  SupportDetail[]  // Store URLs for PDFs, images, videos
  createdAt       DateTime  @default(now())

  purchases DigitalProductPurchase[]
}

model DigitalProductPurchase {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  product         DigitalProduct  @relation(fields: [productId], references: [id])
  productId       String
  purchaseDate    DateTime        @default(now())
  price           Decimal
  status          PurchaseStatus  @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum PurchaseStatus {
  ACTIVE
  REVOKED
}

enum PriceType {
  FIXED
  FLEXIBLE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model DigitalFile {
  id            String          @id @default(cuid())
  product       DigitalProduct  @relation(fields: [productId], references: [id])
  productId     String
  fileType      FileType
  fileUrl       String
  fileName      String
  fileSize      Int
  s3Key         String
  createdAt     DateTime        @default(now())
}

enum FileType {
  PDF
  IMAGE
  VIDEO
  LINK
  DOCUMENT
  AUDIO
  OTHER
}

model Testimonial {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  name        String
  image       String?
  description String
  rating      Int @default(5)  // 1 to 5 stars
  createdAt   DateTime       @default(now())
}

model FAQ {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  answer      String
  createdAt   DateTime       @default(now())
}

model GalleryImage {
  id          String         @id @default(cuid()) 
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  imageUrl    String
  imageOrder  Int?
  imageType   ImageType
  imageName   String?
  createdAt   DateTime       @default(now())
} 

enum ImageType {
  IMAGE
  VIDEO
}

model RegistrationQuestion {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  question    String
  fieldType   FieldType
  fieldOptions String[]
  isRequired  Boolean      @default(false)
  createdAt   DateTime       @default(now())
} 

enum FieldType {
  TEXT
  DROPDOWN
  RADIO
  CHECKBOX
  DATE
  EMAIL
  PHONE
  NUMBER
}

model SupportDetail {
  id          String         @id @default(cuid())
  product     DigitalProduct @relation(fields: [productId], references: [id])
  productId   String
  email       String?
  phone       String?
  whatsapp    String?
  telegram    String?
  createdAt   DateTime       @default(now())
}

model Order {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  method          String
  amount          Decimal
  status          OrderStatus    @default(PENDING)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  productType       ProductType

  digitalProductId       String?
  digitalProduct         DigitalProduct? @relation(fields: [digitalProductId], references: [id])
  
  telegramPlan      TelegramPlan?   @relation(fields: [telegramPlanId], references: [id])
  telegramPlanId    String?

  transactionId   String?

  transaction Transaction?
}

enum ProductType {
  DIGITAL_PRODUCT
  TELEGRAM_PLAN
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id            String               @id @default(cuid())
  user          User                 @relation(fields: [userId], references: [id])
  userId        Int
  order         Order                @relation(fields: [orderId], references: [id])
  orderId       String               @unique
  gateway       String     // "Razorpay", "Cashfree"
  gatewayTxnId  String     // payment_id from Razorpay/Cashfree
  amount        Decimal
  status        TransactionStatus    @default(PENDING)
  paymentMethod           Json?              // payment_method from Cashfree
  paymentGroup            String?              // payment_group from Cashfree
  paymentMessage          String?              // payment_message from Cashfree
  paymentTime             DateTime?            // payment_time from Cashfree
  paymentCompletionTime   DateTime?          // payment_completion_time from Cashfree
  bankReference           String?              // bank_reference from Cashfree
  authId                  String?              // auth_id from Cashfree
  paymentCurrency         String?              // payment_currency from Cashfree
  paymentGatewayDetails   Json?              // payment_gateway_details from Cashfree
  createdAt     DateTime             @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Setting {
  id          String   @id @default(cuid())
  title       String
  description String?
  logo        String?
  email       String
  phone       String
  createdAt   DateTime @default(now())
}

model Link {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  originalUrl String
  shortId     String    @unique
  shortUrl    String    @unique
  clicks      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  analytics   ClickAnalytics[]
  deletedAt   DateTime?
}

model ClickAnalytics {
  id          String    @id @default(cuid())
  link        Link      @relation(fields: [linkId], references: [id])
  linkId      String
  ipAddress   String?
  host        String?
  userAgent   String?
  referer     String?
  latitude    Float?
  longitude   Float?
  screenWidth Int?
  screenHeight Int?
  browser     String?
  operatingSystem String?
  device      String?
  language    String?
  country     String?
  city        String?
  region      String?
  createdAt   DateTime  @default(now())

  @@index([linkId])
  
}